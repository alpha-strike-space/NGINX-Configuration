worker_processes auto;

events {
    worker_connections 1000;
}

http {
    # Map for handling WebSocket upgrades
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    #---------------------------------------------------------
    # HTTP to HTTPS Redirect â€“ Both for main domains and API
    #---------------------------------------------------------
    server {
        listen 80;
        listen [::]:80;
        server_name alpha-strike.space www.alpha-strike.space frontier.alpha-strike.space api.alpha-strike.space;
        return 302 https://$host$request_uri;
    }

    #---------------------------------------------------------
    # HTTPS Server Block for User Interface on main domains
    #---------------------------------------------------------
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name alpha-strike.space www.alpha-strike.space frontier.alpha-strike.space;

        ssl_certificate     /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

    	# Set the document root to your static HTML directory
	root /usr/share/nginx/html/;
	index main.html;
	# Redirect URLs ending in .html to the clean version (e.g., /main.html to /main)
    	#rewrite ^/(.+)\.html$ /$1 permanent;
	# Serve the main page at the root URL
    	# Existing location for serving files
    	location / {
    	    try_files $uri $uri/ =404;
    	}
    	# Friendly URL for search
    	#location = /search {
    	#    try_files /search.html =404;
    	#}

    	# Friendly URL for monthly victims
    	#location = /monthly_victims {
        #	try_files /monthly_victims.html =404;
    	#}

    	# Friendly URL for monthly killers
    	#location = /monthly_killers {
    	#    try_files /monthly_killers.html =404;
    	#}

    	# Friendly URL for systems
    	#location = /monthly_systems {
    	#    try_files /systems.html =404;
    	#}

    	# Fallback for other requests
    	#location /sitemap.xml {
    	#    try_files /sitemap.xml =404;
    	#}
	#location /robots.txt { 
	#    try_files /robots.txt =404;
	#}

        # (Optional additional locations specific to your shiny service)
    }

    #---------------------------------------------------------
    # HTTPS Server Block for API on api.alpha-strike.space
    #---------------------------------------------------------
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name api.alpha-strike.space;

        ssl_certificate     /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

	autoindex off;

        location = /documentation {
                return 301 /documentation/;
        }
        # Serve API Documentation from a subdirectory
        location ^~ /documentation/ {
            # Ensure your documentation files are placed in this directory
            alias /usr/share/nginx/html/;
            index documentation.html;
            # Optionally disable proxy buffering or add caching headers if needed
        }

        # All other API endpoints handled by your crow application
        location / {
            proxy_pass         http://running_crow:8080/;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            
            # Optional: Add CORS headers if your API is consumed cross-domain
            add_header         Access-Control-Allow-Origin *;
            add_header         Access-Control-Allow-Headers Upgrade;
        }

        # If you have WebSocket endpoints for your API
        location /ws/ {
            proxy_pass         http://running_crow:8080/;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection "Upgrade";
            proxy_set_header   Host $host;
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            add_header         Access-Control-Allow-Origin *;
            add_header         Access-Control-Allow-Headers Upgrade;
        }
    }
}
